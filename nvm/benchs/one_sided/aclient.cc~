#include <gflags/gflags.h>

#include "rlib/core/lib.hh"
#include "rlib/tests/random.hh"

#include "../thread.hh"

#include "../statucs.hh"

DEFINE_string(addr, "localhost:8888", "Server address to connect to.");
DEFINE_int64(use_nic_idx, 0, "Which NIC to create QP");
DEFINE_int64(reg_nic_name, 73, "The name to register an opened NIC at rctrl.");
DEFINE_int64(reg_mem_name, 73, "The name to register an MR at rctrl.");
DEFINE_uint64(address_space, 1,
              "The random read/write space of the registered memory (in GB)");

DEFINE_int64(threads, 8, "Number of threads to use.");

DEFINE_int64(id, 0, "");

using namespace rdmaio;
using namespace rdmaio::rmem;
using namespace rdmaio::qp;

using namespace test;

using namespace nvm;

// issue RDMA requests in a window
template <usize window_sz>
void rdma_window(RC *qp, u64 *start_buf, FastRandom &rand,
                 u64 &pending_reqs) {

  const auto address_space =
      static_cast<u64>(FLAGS_address_space) * (1024 * 1024 * 1024L);

  u64 *buf = start_buf;
  for (uint i = 0; i < window_sz; ++i) {
    //RDMA_LOG(4)  << "send one: " << pending_reqs;
    //sleep(1);
    buf[i] = rand.next();
    u64 remote_addr = rand.next() % (address_space - 8);
    //    RDMA_LOG(2) << "read addr: " << remote_addr; sleep(1);

#if 0 // write case
    auto res_s = qp->send_normal(
        {.op = IBV_WR_RDMA_WRITE,
         .flags = IBV_SEND_INLINE | ((pending_reqs == 0) ? (IBV_SEND_SIGNALED) : 0),
         .len = sizeof(u64),
         .wr_id = 0},
        {.local_addr = reinterpret_cast<RMem::raw_ptr_t>(&(buf[i])),
         .remote_addr = remote_addr,
         .imm_data = 0});
#else
    auto res_s = qp->send_normal(
        {.op = IBV_WR_RDMA_READ,
         .flags =
             0 | ((pending_reqs == 0) ? (IBV_SEND_SIGNALED) : 0),
         .len = 8,
         .wr_id = 0},
        {.local_addr = reinterpret_cast<RMem::raw_ptr_t>(&(buf[i])),
         .remote_addr = remote_addr,
         .imm_data = 0});
#endif
    RDMA_ASSERT(res_s == IOCode::Ok) << " error: " << res_s.desc;

    if (pending_reqs >= 32) {
      auto res_p = qp->wait_one_comp();
      RDMA_ASSERT(res_p == IOCode::Ok)
          << "wait completion error: " << ibv_wc_status_str(res_p.desc.status);

      pending_reqs = 0;
    } else
      pending_reqs += 1;
  }
}

int main(int argc, char **argv) {

  gflags::ParseCommandLineFlags(&argc, &argv, true);

  RDMA_LOG(4) << "client bootstrap with " << FLAGS_threads << " threads";

  using TThread = Thread<int>;
  std::vector<std::unique_ptr<TThread>> threads;
  std::vector<Statics> statics(FLAGS_threads);

  auto address_space =
      static_cast<u64>(FLAGS_address_space) * (1024 * 1024 * 1024L);

  RCtrl ctrl(6666); //
  {
    auto nic =
        RNic::create(RNicInfo::query_dev_names().at(FLAGS_use_nic_idx)).value();

    // register the nic with name 0
    RDMA_ASSERT(ctrl.opened_nics.reg(FLAGS_reg_nic_name, nic));
  }

  auto rmem = Arc<RMem>(new RMem(address_space)); // use standard malloc
  RDMA_ASSERT(ctrl.registered_mrs.create_then_reg(
      FLAGS_reg_mem_name, rmem,
      ctrl.opened_nics.query(FLAGS_reg_nic_name).value()));

  ctrl.start_daemon();

  RDMA_LOG(4) << "asym client daemon starts";

  for (uint thread_id = 0; thread_id < FLAGS_threads; ++thread_id) {

    threads.push_back(std::make_unique<TThread>([thread_id, address_space,
                                                 &statics]() -> int {
      // 1. create a local QP to use
      auto nic = RNic::create(RNicInfo::query_dev_names().at(FLAGS_use_nic_idx))
                     .value();
      auto qp = RC::create(nic, QPConfig()).value();

      // 2. create the pair QP at server using CM
      ConnectManager cm(FLAGS_addr);
      // RDMA_LOG(2) << "start to connect to server: " << FLAGS_addr;
      auto wait_res = cm.wait_ready(5000000, 4);
      if (wait_res ==
          IOCode::Timeout) // wait 1 second for server to ready, retry 2 times
        RDMA_ASSERT(false) << "cm connect to server timeout " << wait_res.desc;

      u64 key = 0;
      auto qp_res =
          cm.cc_rc(thread_id + FLAGS_threads * FLAGS_id, qp, key, FLAGS_reg_nic_name, QPConfig());
      RDMA_ASSERT(qp_res == IOCode::Ok) << qp_res.desc;
      // RDMA_LOG(4) << "client fetch QP authentical key: " << key;

      // 3. create the local MR for usage, and create the remote MR for usage
      auto local_mem = Arc<RMem>(new RMem(2 * 1024 * 1024));
      auto local_mr = RegHandler::create(local_mem, nic).value();

      rmem::RegAttr remote_attr;
      auto fetch_res = cm.fetch_remote_mr(FLAGS_reg_mem_name, remote_attr);
      RDMA_ASSERT(fetch_res == IOCode::Ok) << fetch_res.desc;

      qp->bind_remote_mr(remote_attr);
      qp->bind_local_mr(local_mr->get_reg_attr().value());

      // the benchmark code

      u64 bench_ops = 1000;
      FastRandom rand(0xdeadbeaf + FLAGS_id * 0xdddd + thread_id);
      r2::Timer timer;

      // RDMA_LOG(4) << "all done, start bench code!";

      u64 sum = 0;
      u64 pending_reqs = 0;

      while (timer.passed_sec() < 100) {
        /*This is the example code usage of the fully created RCQP */
        u64 *test_buf = (u64 *)(local_mem->raw_ptr);

        rdma_window<10>(qp.get(), test_buf, rand, pending_reqs);

        statics[thread_id].inc(10);
      }
      RDMA_LOG(4) << "final check sum: " << sum;

      return 0;
    }));

    /***********************************************************/

    // finally, some clean up, to delete my created QP at server
    // auto del_res = cm.delete_remote_rc(73, key);
    // RDMA_ASSERT(del_res == IOCode::Ok)
    //<< "delete remote QP error: " << del_res.desc;
  }
  for (auto &t : threads)
    t->start();

  sleep(1);
  Reporter::report_thpt(statics, 200);

  RDMA_LOG(4) << "client returns";

  return 0;
}
